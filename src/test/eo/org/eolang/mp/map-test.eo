+package org.eolang.mp
+alias org.eolang.mp.map
+junit

[] > map-find-do-not-crashed
  map * > mp!
  mp.find 1 > res!
  eq. > @
    res.length
    0

[] > map-find-works
  map (* (*) (* (* 4 "a")) (* (* 2 "c") (* 8 "c"))) > mp!
  mp.find 2 > r2!
  mp.find 3 > r3!
  mp.find 4 > r4!
  mp.find 8 > r8!
  and. > @
    eq.
      r2.at 0
      "c"
    eq.
      r3.length
      0
    eq.
      r4.at 0
      "a"
    eq.
      r8.at 0
      "c"

[] > map-find-and-with
  map * > fmp!
  ((((fmp.with 1 "a").with "abc" "cba").with 4 5).with 3 5) > mp!
  mp.find 1 > r1!
  mp.find 2 > r2!
  mp.find 3 > r3!
  mp.find 4 > r4!
  mp.find "abc" > rabc!
  and. > @
    eq.
      r1.at 0
      "a"
    eq.
      r2.length
      0
    eq.
      r3.at 0
      5
    eq.
      r4.at 0
      5
    eq.
      rabc.at 0
      "cba"

[] > map-of-maps
  map * > init-mp!
  (init-mp.with 1 2).with 3 4 > mp1!
  (init-mp.with "a" "b").with "c" "d" > mp2!
  init-mp.with TRUE FALSE > mp3!
  ((init-mp.with 0 mp1).with 1 mp2).with 2 mp3 > mp-res!
  and. > @
    eq.
      (mp-res.find -1).length
      0
    eq.
      (((mp-res.find 1).at 0).find "c").at 0
      "d"

[] > map-without-works
  map * > init-mp!
  (((init-mp.with 1 "a").with 3 "c").with 2 "b").with 4 "d" > mp!
  (mp.without 2).without 3 > mp2!
  and. > @
    eq.
      (mp.find 1).length
      1
    eq.
      (mp.find 2).length
      1
    eq.
      (mp2.find 3).length
      0
    eq.
      (mp2.find 4).length
      1

[] > map-without-many-elements
  map * > init-mp!
  ((init-mp.with 1 "a").with 2 "b").with 1 "c" > mp!
  mp.without 1 > mp2!
  and. > @
    eq.
      mp.length
      2
    eq.
      mp2.length
      1
    eq.
      (mp.find 1).at 0
      "c"
